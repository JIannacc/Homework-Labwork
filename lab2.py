# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v6reeuF7FmRckpjc66EUebTsXE10tI7a
"""

a = 3
b = 4

print (a + b)

a = "3"
b = "4"

print (a + b)

"""The difference of the operator "+" in these two cases is that + acts as a tool to combine values. In the first case, it is used to add the integer values 3 and 4. However in the second program 3 and 4 act as strings, not number values, so the + operator combines the two strings to make "34"
"""

'''
a = "3" , b = "4"
'''
'''
it is incorrect because when applying values to a variable, all variables must
be on the left side of the = operator.
They can be separated by commas, however the corresponding value must follow
the order of the variables.
Like this
'''
a, b = "3", "4"

a = "123456"
sum=0
for i in a:
    sum += int(i)
print(sum)

"""When running a for loop, it checks each position in "a" for an integer, and adds it to the sum value until it runs out of integers in "a"
"""

a =3
print("The building has", a, "floors")
print("The building has"+str(a)+"floors")

"""The difference here is in the first print statement you're printing out 3 separate statements that together make one sentence. So the spaces here show that there are separate statements used here.

In the second print statement, you are using the + operator, which before was shown to be the combination operator, in this case, we combine "The building has" "3" and "floors" without any spaces between the statements. This is why we see the sentence output "has3floors", because it combined all the inputs together.
"""